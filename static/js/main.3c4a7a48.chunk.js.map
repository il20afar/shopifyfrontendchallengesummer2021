{"version":3,"sources":["Components/Input/Input.tsx","Components/InfoFieldContainer/InfoFieldContainer.tsx","Components/MovieTileContainer/MovieTileContainer.tsx","Utils/getOmdbResults.ts","Components/ResultContainer/ResultContainer.tsx","Main/Main.tsx","Hooks/useInitialLocalStorage.tsx","Hooks/useUpdateLocalStorage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","props","value","placeholder","onChange","onSearch","onCancel","inputRef","useRef","iconAvailability","className","ref","onKeyDown","e","key","preventDefault","type","onClick","icon","faTimes","color","size","faSearch","InfoFieldContainer","title","children","MovieTileContainer","index","movieResult","isExpanded","toggleExpanded","onAction","showActionButton","useState","isExpandLoading","setIsExpandLoading","isResults","handlers","current","classList","add","window","setTimeout","imdbID","onExpandInfo","Poster","faFilm","src","alt","Title","map","elem","uuid","Year","faPlus","faMinus","faSpinner","faTimesCircle","faInfoCircle","getOmdbResults","searchTerm","a","params","queryString","stringify","s","i","fetch","process","req","json","toString","ResultContainer","searchResults","searchStatus","expanded","setExpanded","movieResultExpandedRef","imdbId","res","React","useEffect","length","Main","setSearchStatus","searchValue","setSearchValue","setSearchResults","nominations","setNominations","input","target","results","Search","console","log","rest","find","filter","loc","localStorage","getItem","JSON","parse","useInitialLocalStorage","setItem","useUpdateLocalStorage","isBannerActive","style","maxHeight","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c4a7a48.chunk.js","sourcesContent":["// [IMPORTS]\n/* node_modules */\nimport React, { useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHistory } from \"@fortawesome/free-solid-svg-icons\";\n\n/* folder */\nimport \"./Input.scss\";\nimport { IInputProps } from \"./IInputProps\";\n\n// [FUNCTIONAL COMPONENTS]\nconst Input = (props: IInputProps) => {\n  const { value, placeholder, onChange, onSearch, onCancel } = props;\n  const inputRef = useRef(null);\n  const iconAvailability = value === \"\" ? \"unavailable\" : \"available\";\n  return (\n    <div className=\"component_il20afar_input\">\n      <div className=\"input_container\">\n        <input\n          ref={inputRef}\n          className=\"input_div\"\n          value={value}\n          placeholder={placeholder}\n          onChange={onChange}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              if (value !== \"\") {\n                e.preventDefault();\n                onSearch();\n              }\n            }\n          }}\n          type=\"text\"\n        />\n        <div\n          className={`cancel_icon_container ${iconAvailability}`}\n          onClick={() => {\n            onCancel();\n            //@ts-ignore\n            // inputRef.current.focus();\n          }}\n        >\n          <FontAwesomeIcon icon={faTimes} color=\"red\" size=\"sm\" />\n        </div>\n      </div>\n\n      <div\n        className={`search_icon_container ${iconAvailability}`}\n        onClick={onSearch}\n      >\n        <FontAwesomeIcon icon={faSearch} color=\"white\" size=\"sm\" />\n      </div>\n    </div>\n  );\n};\n\n// [EXPORTS]\nexport default Input;\n","// [IMPORTS]\n/* folder */\nimport \"./InfoFieldContainer.scss\";\nimport { IInfoFieldContainerProps } from \"./IInfoFieldContainerProps\";\n\n// [FUNCTIONAL COMPONENTS]\nconst InfoFieldContainer = (props: IInfoFieldContainerProps) => {\n  const { title, children } = props;\n  return (\n    <div className=\"component_il20afar_info_field_container\">\n      <div className=\"info_field_title\">{title}:</div>\n      <div className=\"info_field_content\">{children}</div>\n    </div>\n  );\n};\n\n// [EXPORTS]\nexport default InfoFieldContainer;\n","// [IMPORTS]\n/* node_modules */\nimport React, { useRef, useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faInfo,\n  faPlus,\n  faMinus,\n  faInfoCircle,\n  faSpinner,\n  faFilm,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\n/* project */\nimport InfoFieldContainer from \"../InfoFieldContainer/InfoFieldContainer\";\n/* folder */\nimport \"./MovieTileContainer.scss\";\nimport { IMovieTileContainerProps } from \"./IMovieTileContainerProps\";\n\n// [FUNCTIONAL COMPONENTS]\nconst MovieTileContainer = (props: IMovieTileContainerProps) => {\n  const {\n    type,\n    index,\n    movieResult,\n    isExpanded,\n    toggleExpanded,\n    onAction,\n    showActionButton,\n  } = props;\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [isExpandLoading, setIsExpandLoading] = useState(false);\n\n  const isResults = type === \"Results\";\n\n  const handlers = {\n    onAction: () => {\n      if (showActionButton) {\n        ref.current && ref.current.classList.add(\"close_animate\");\n        window.setTimeout(() => {\n          onAction(type, movieResult.imdbID);\n        }, 300);\n      }\n    },\n    onExpandInfo: () => {\n      if (ref.current) {\n        !isExpandLoading && setIsExpandLoading(true);\n        toggleExpanded(index, movieResult.imdbID);\n      }\n    },\n  };\n\n  return (\n    <div\n      key={uuid()}\n      ref={ref}\n      className={`component_il20afar_movie_info_container ${\n        isResults ? \"results\" : \"nominations\"\n      } ${isExpanded ? \"expanded\" : \"\"} ${\n        !showActionButton ? \"hide_action_button\" : \"\"\n      }`}\n    >\n      <div className=\"action_hover_wrapper\" onClick={handlers.onAction}>\n        <div className=\"poster_container\">\n          {movieResult.Poster === \"N/A\" ? (\n            <FontAwesomeIcon icon={faFilm} size=\"lg\" color=\"white\" />\n          ) : (\n            <img\n              src={movieResult.Poster}\n              alt={`movie-poster-${movieResult.Title}`}\n            />\n          )}\n        </div>\n        <div className=\"info_container\">\n          {isExpanded ? (\n            <>\n              {[\n                \"Title\",\n                \"Director\",\n                \"Actors\",\n                \"Year\",\n                \"Runtime\",\n                \"Rated\",\n                \"Released\",\n                \"Plot\",\n              ].map((elem) => (\n                <InfoFieldContainer key={uuid()} title={elem}>\n                  {movieResult[elem]}\n                </InfoFieldContainer>\n              ))}\n            </>\n          ) : (\n            <div className=\"info_wrapper\">\n              {`${movieResult.Title} (${movieResult.Year})`}\n            </div>\n          )}\n        </div>\n        <div className={`icon_container ${isResults ? \"add\" : \"remove\"}`}>\n          <FontAwesomeIcon\n            icon={isResults ? faPlus : faMinus}\n            color={\"black\"}\n          />\n        </div>\n      </div>\n\n      <div\n        className={`icon_container info ${isExpandLoading ? \"animate\" : \"\"}`}\n        onClick={handlers.onExpandInfo}\n      >\n        <FontAwesomeIcon\n          icon={\n            isExpandLoading\n              ? faSpinner\n              : isExpanded\n              ? faTimesCircle\n              : faInfoCircle\n          }\n          color={\"black\"}\n        />\n      </div>\n    </div>\n  );\n};\n\n// [EXPORTS]\nexport default MovieTileContainer;\n","import queryString from \"query-string\";\n\nexport const getOmdbResults = async (\n  searchTerm: string,\n  type: \"search\" | \"id\"\n) => {\n  const params = queryString.stringify({\n    ...(type === \"search\" && { s: searchTerm }),\n    ...(type === \"id\" && { i: searchTerm }),\n    type: \"movie\",\n  });\n  try {\n    const req = await fetch(\n      `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_API_KEY}&${params}`\n    );\n    return await req.json();\n  } catch (error) {\n    return error.toString();\n  }\n};\n","// [IMPORTS]\n/* node_modules */\nimport React, { useState, useRef } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n/* project */\nimport MovieTileContainer from \"../MovieTileContainer/MovieTileContainer\";\nimport { getOmdbResults } from \"../../Utils/getOmdbResults\";\n/* folder */\nimport \"./ResultContainer.scss\";\nimport { IResultContainerProps } from \"./IResultContainerProps\";\n\nconst ResultContainer = (props: IResultContainerProps) => {\n  const {\n    type,\n    searchResults,\n    searchStatus,\n    onAction,\n    showActionButton = true,\n  } = props;\n  const [expanded, setExpanded] = useState(-1);\n  const movieResultExpandedRef: any = useRef({});\n\n  const toggleExpanded = async (index: number, imdbId: string) => {\n    if (index === expanded) {\n      setExpanded(-1);\n    } else {\n      const res = await getOmdbResults(imdbId, \"id\");\n      movieResultExpandedRef.current = res;\n      setExpanded(index);\n    }\n  };\n\n  React.useEffect(() => {\n    setExpanded(-1);\n  }, [searchStatus]);\n\n  return (\n    <div\n      className={`component_il20afar_result_container ${searchStatus} ${\n        !showActionButton ? \"hideActionButton\" : \"\"\n      }`}\n    >\n      <div className=\"title_container\">{type}</div>\n      <div className=\"content_wrapper\">\n        {searchResults.length === 0 ? (\n          <div className=\"empty_result_container\">\n            {type === \"Results\"\n              ? searchStatus === \"idle\"\n                ? \"Search to display movie results.\"\n                : \"No results found...\"\n              : \"Add movies from the 'Results' section!\"}\n          </div>\n        ) : (\n          searchResults.map((movieResult, index) => {\n            const isExpanded = index === expanded;\n\n            return (\n              <MovieTileContainer\n                key={uuid()}\n                type={type}\n                index={index}\n                movieResult={\n                  isExpanded ? movieResultExpandedRef.current : movieResult\n                }\n                isExpanded={isExpanded}\n                toggleExpanded={toggleExpanded}\n                onAction={onAction}\n                showActionButton={showActionButton}\n              />\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResultContainer;\n","// [IMPORTS]\n/* node_modules */\nimport React, { useState } from \"react\";\nimport Div100vh from \"react-div-100vh\";\n/* project */\nimport Input from \"../Components/Input/Input\";\nimport ResultContainer from \"../Components/ResultContainer/ResultContainer\";\nimport { useInitialLocalStorage } from \"../Hooks/useInitialLocalStorage\";\nimport { useUpdateLocalStorage } from \"../Hooks/useUpdateLocalStorage\";\nimport { getOmdbResults } from \"../Utils/getOmdbResults\";\n/* folder */\nimport \"./Main.scss\";\n\n// [GLOBAL TYPES]\nexport type TSearchStatus =\n  | \"idle\"\n  | \"searching\"\n  | \"success\"\n  | \"noresults\"\n  | \"error\";\n\n// [FUNCTIONAL COMPONENTS]\nconst Main = () => {\n  const [searchStatus, setSearchStatus]: [TSearchStatus, any] = useState(\n    \"idle\"\n  );\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [nominations, setNominations] = useState([]);\n\n  // Handlers for input and nominations actions\n  const handlers = {\n    input: {\n      onChange: (e: { target: { value: React.SetStateAction<string> } }) => {\n        setSearchValue(e.target.value);\n      },\n      onSearch: async () => {\n        setSearchStatus(\"searching\");\n        const results = await getOmdbResults(searchValue, \"search\");\n        if (results.Search) {\n          setSearchResults(results.Search);\n          setSearchStatus(\"success\");\n        } else {\n          setSearchResults([]);\n          setSearchStatus(\"noresults\");\n        }\n      },\n      onCancel: () => {\n        setSearchValue(\"\");\n      },\n    },\n\n    nominations: {\n      onAction: (type: \"Results\" | \"Nominations\", index: number) => {\n        console.log(index);\n        if (type === \"Results\") {\n          // @ts-ignore\n          const rest = searchResults.find((elem: any) => index === elem.imdbID);\n          // @ts-ignore\n          setNominations([rest, ...nominations]);\n        } else {\n          setNominations(\n            [...nominations].filter((elem: any) => index !== elem.imdbID)\n          );\n        }\n      },\n    },\n  };\n\n  // Uses the content in local storage to render initial nominations\n  useInitialLocalStorage(setNominations);\n\n  // Updates the content of local storage on nominations change\n  useUpdateLocalStorage(nominations, setNominations);\n\n  console.log(searchResults, nominations);\n\n  const isBannerActive = nominations.length === 5;\n  return (\n    <Div100vh style={{ maxHeight: \"100%\" }}>\n      <div className={`nominations_banner ${isBannerActive ? \"show\" : \"hide\"}`}>\n        You have successfully selected all of your nominations, thank you for\n        using Shoppies 🙂\n      </div>\n\n      <div\n        className={`main_container ${searchStatus} ${\n          isBannerActive ? \"showBanner\" : \"\"\n        }`}\n      >\n        <div className=\"logo_container\">The Shoppies</div>\n        <div className=\"search_container\">\n          <Input\n            value={searchValue}\n            placeholder=\"Search for a movie...\"\n            onChange={handlers.input.onChange}\n            onSearch={handlers.input.onSearch}\n            onCancel={handlers.input.onCancel}\n          />\n        </div>\n        <div className=\"content_container\">\n          <ResultContainer\n            type=\"Results\"\n            searchResults={searchResults.filter(\n              (elem) => !nominations.includes(elem)\n            )}\n            searchStatus={searchStatus}\n            onAction={handlers.nominations.onAction}\n            showActionButton={nominations.length !== 5}\n          />\n          <ResultContainer\n            type=\"Nominations\"\n            searchResults={nominations}\n            searchStatus={\"idle\"}\n            onAction={handlers.nominations.onAction}\n          />\n        </div>\n      </div>\n    </Div100vh>\n  );\n};\n\n// [EXPORTS]\nexport default Main;\n","// [IMPORTS]\n/* node_modules */\nimport { useEffect } from \"react\";\n\n// [CUSTOM HOOK]\nexport const useInitialLocalStorage = (setNominations: (obj: any) => void) => {\n  return useEffect(() => {\n    const loc = localStorage.getItem(\"shopify_challenge_nominations\");\n    if (loc !== null) {\n      setNominations(JSON.parse(loc));\n    }\n  }, []);\n};\n","// [IMPORTS]\n/* node_modules */\nimport { useEffect } from \"react\";\n\n// [CUSTOM HOOK]\nexport const useUpdateLocalStorage = (\n  nominations: any,\n  setNominations: (obj: any) => void\n) => {\n  return useEffect(() => {\n    localStorage.setItem(\n      \"shopify_challenge_nominations\",\n      JSON.stringify(nominations)\n    );\n  }, [nominations, setNominations]);\n};\n","import React from \"react\";\nimport Main from \"./Main/Main\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}