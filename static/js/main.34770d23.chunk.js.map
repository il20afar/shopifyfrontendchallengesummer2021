{"version":3,"sources":["Components/Input/Input.tsx","Components/InfoFieldContainer/InfoFieldContainer.tsx","Components/MovieTileContainer/MovieTileContainer.tsx","Utils/getOmdbResults.ts","Components/ResultContainer/ResultContainer.tsx","Main/Main.tsx","Hooks/useInitialLocalStorage.tsx","Hooks/useUpdateLocalStorage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","props","value","placeholder","onChange","onSearch","onCancel","inputRef","useRef","iconAvailability","className","ref","onKeyDown","e","key","preventDefault","type","onClick","current","focus","icon","faTimes","color","size","faSearch","InfoFieldContainer","title","children","href","MovieTileContainer","index","movieResult","isExpanded","toggleExpanded","onAction","showActionButton","isResults","handlers","classList","add","window","setTimeout","Title","Poster","faFilm","src","alt","map","elem","uuid","Year","faPlus","faMinus","imdbID","faInfoCircle","getOmdbResults","searchTerm","a","params","queryString","stringify","s","i","fetch","process","req","json","toString","ResultContainer","searchResults","searchStatus","useState","expanded","setExpanded","movieResultExpandedRef","imdbId","res","React","useEffect","length","Main","setSearchStatus","searchValue","setSearchValue","setSearchResults","nominations","setNominations","input","target","results","Search","rest","find","filter","loc","localStorage","getItem","JSON","parse","useInitialLocalStorage","setItem","useUpdateLocalStorage","isBannerActive","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34770d23.chunk.js","sourcesContent":["// [IMPORTS]\n/* node_modules */\nimport React, { useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHistory } from \"@fortawesome/free-solid-svg-icons\";\n\n/* folder */\nimport \"./Input.scss\";\nimport { IInputProps } from \"./IInputProps\";\n\n// [FUNCTIONAL COMPONENTS]\nconst Input = (props: IInputProps) => {\n  const { value, placeholder, onChange, onSearch, onCancel } = props;\n  const inputRef = useRef(null);\n  const iconAvailability = value === \"\" ? \"unavailable\" : \"available\";\n  return (\n    <div className=\"component_il20afar_input\">\n      <div className=\"input_container\">\n        <input\n          ref={inputRef}\n          className=\"input_div\"\n          value={value}\n          placeholder={placeholder}\n          onChange={onChange}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              if (value !== \"\") {\n                e.preventDefault();\n                onSearch();\n              }\n            }\n          }}\n          type=\"text\"\n        />\n        <div\n          className={`cancel_icon_container ${iconAvailability}`}\n          onClick={() => {\n            onCancel();\n            //@ts-ignore\n            inputRef.current.focus();\n          }}\n        >\n          <FontAwesomeIcon icon={faTimes} color=\"red\" size=\"sm\" />\n        </div>\n      </div>\n\n      <div\n        className={`search_icon_container ${iconAvailability}`}\n        onClick={onSearch}\n      >\n        <FontAwesomeIcon icon={faSearch} color=\"white\" size=\"sm\" />\n      </div>\n    </div>\n  );\n};\n\n// [EXPORTS]\nexport default Input;\n","// [IMPORTS]\n/* folder */\nimport \"./InfoFieldContainer.scss\";\nimport { IInfoFieldContainerProps } from \"./IInfoFieldContainerProps\";\n\n// [FUNCTIONAL COMPONENTS]\nconst InfoFieldContainer = (props: IInfoFieldContainerProps) => {\n  const { title, children } = props;\n  return (\n    <div className=\"component_il20afar_info_field_container\">\n      <div className=\"info_field_title\">{title}:</div>\n      <a className=\"info_field_content\" href={children}>\n        {children}\n      </a>\n    </div>\n  );\n};\n\n// [EXPORTS]\nexport default InfoFieldContainer;\n","// [IMPORTS]\n/* node_modules */\nimport React, { useRef } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { faFilm } from \"@fortawesome/free-solid-svg-icons\";\n/* project */\nimport InfoFieldContainer from \"../InfoFieldContainer/InfoFieldContainer\";\n/* folder */\nimport \"./MovieTileContainer.scss\";\nimport { IMovieTileContainerProps } from \"./IMovieTileContainerProps\";\n\n// [FUNCTIONAL COMPONENTS]\nconst MovieTileContainer = (props: IMovieTileContainerProps) => {\n  const {\n    type,\n    index,\n    movieResult,\n    isExpanded,\n    toggleExpanded,\n    onAction,\n    showActionButton,\n  } = props;\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isResults = type === \"Results\";\n\n  const handlers = {\n    onAction: () => {\n      if (showActionButton) {\n        ref.current && ref.current.classList.add(\"close_animate\");\n        window.setTimeout(() => {\n          onAction(type, movieResult.Title);\n        }, 300);\n      }\n    },\n  };\n\n  return (\n    <div\n      key={uuid()}\n      ref={ref}\n      className={`component_il20afar_movie_info_container ${\n        isResults ? \"results\" : \"nominations\"\n      } ${isExpanded ? \"expanded\" : \"\"} ${\n        !showActionButton ? \"hide_action_button\" : \"\"\n      }`}\n    >\n      <div className=\"action_hover_wrapper\" onClick={handlers.onAction}>\n        <div className=\"poster_container\">\n          {movieResult.Poster === \"N/A\" ? (\n            <FontAwesomeIcon icon={faFilm} size=\"lg\" color=\"white\" />\n          ) : (\n            <img\n              src={movieResult.Poster}\n              alt={`movie-poster-${movieResult.Title}`}\n            />\n          )}\n        </div>\n        <div className=\"info_container\">\n          {isExpanded ? (\n            <>\n              {[\n                \"Title\",\n                \"Director\",\n                \"Actors\",\n                \"Year\",\n                \"Runtime\",\n                \"Rated\",\n                \"Released\",\n                \"Plot\",\n              ].map((elem) => (\n                <InfoFieldContainer key={uuid()} title={elem}>\n                  {movieResult[elem]}\n                </InfoFieldContainer>\n              ))}\n            </>\n          ) : (\n            <div className=\"info_wrapper\">\n              {`${movieResult.Title} (${movieResult.Year})`}\n            </div>\n          )}\n        </div>\n        <div className={`icon_container ${isResults ? \"add\" : \"remove\"}`}>\n          <FontAwesomeIcon\n            icon={isResults ? faPlus : faMinus}\n            color={\"black\"}\n          />\n        </div>\n      </div>\n\n      <div\n        className=\"icon_container info\"\n        onClick={() => toggleExpanded(index, movieResult.imdbID)}\n      >\n        <FontAwesomeIcon icon={faInfoCircle} color={\"black\"} />\n      </div>\n    </div>\n  );\n};\n\n// [EXPORTS]\nexport default MovieTileContainer;\n","import queryString from \"query-string\";\n\nexport const getOmdbResults = async (\n  searchTerm: string,\n  type: \"search\" | \"id\"\n) => {\n  const params = queryString.stringify({\n    ...(type === \"search\" && { s: searchTerm }),\n    ...(type === \"id\" && { i: searchTerm }),\n    type: \"movie\",\n  });\n  try {\n    const req = await fetch(\n      `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_API_KEY}&${params}`\n    );\n    return await req.json();\n  } catch (error) {\n    return error.toString();\n  }\n};\n","// [IMPORTS]\n/* node_modules */\nimport React, { useState, useRef } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n/* project */\nimport MovieTileContainer from \"../MovieTileContainer/MovieTileContainer\";\nimport { getOmdbResults } from \"../../Utils/getOmdbResults\";\n/* folder */\nimport \"./ResultContainer.scss\";\nimport { IResultContainerProps } from \"./IResultContainerProps\";\n\nconst ResultContainer = (props: IResultContainerProps) => {\n  const {\n    type,\n    searchResults,\n    searchStatus,\n    onAction,\n    showActionButton = true,\n  } = props;\n  const [expanded, setExpanded] = useState(-1);\n  const movieResultExpandedRef: any = useRef({});\n\n  const toggleExpanded = async (index: number, imdbId: string) => {\n    if (index === expanded) {\n      setExpanded(-1);\n    } else {\n      const res = await getOmdbResults(imdbId, \"id\");\n      movieResultExpandedRef.current = res;\n      setExpanded(index);\n    }\n  };\n\n  React.useEffect(() => {\n    setExpanded(-1);\n  }, [searchStatus]);\n\n  return (\n    <div\n      className={`component_il20afar_result_container ${searchStatus} ${\n        !showActionButton ? \"hideActionButton\" : \"\"\n      }`}\n    >\n      <div className=\"title_container\">{type}</div>\n      <div className=\"content_wrapper\">\n        {searchResults.length === 0 ? (\n          <div className=\"empty_result_container\">\n            {type === \"Results\"\n              ? searchStatus === \"idle\"\n                ? \"Search to display movie results.\"\n                : \"No results found...\"\n              : \"Add movies from the 'Results' section!\"}\n          </div>\n        ) : (\n          searchResults.map((movieResult, index) => {\n            const isExpanded = index === expanded;\n\n            return (\n              <MovieTileContainer\n                key={uuid()}\n                type={type}\n                index={index}\n                movieResult={\n                  isExpanded ? movieResultExpandedRef.current : movieResult\n                }\n                isExpanded={isExpanded}\n                toggleExpanded={toggleExpanded}\n                onAction={onAction}\n                showActionButton={showActionButton}\n              />\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResultContainer;\n","// [IMPORTS]\n/* node_modules */\nimport React, { useState } from \"react\";\n/* project */\nimport Input from \"../Components/Input/Input\";\nimport ResultContainer from \"../Components/ResultContainer/ResultContainer\";\n\nimport { useInitialLocalStorage } from \"../Hooks/useInitialLocalStorage\";\nimport { useUpdateLocalStorage } from \"../Hooks/useUpdateLocalStorage\";\nimport { getOmdbResults } from \"../Utils/getOmdbResults\";\n/* folder */\nimport \"./Main.scss\";\n\n// [GLOBAL TYPES]\nexport type TSearchStatus =\n  | \"idle\"\n  | \"searching\"\n  | \"success\"\n  | \"noresults\"\n  | \"error\";\n\n// [FUNCTIONAL COMPONENTS]\nconst Main = () => {\n  const [searchStatus, setSearchStatus]: [TSearchStatus, any] = useState(\n    \"idle\"\n  );\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [nominations, setNominations] = useState([]);\n\n  // Handlers for input and nominations actions\n  const handlers = {\n    input: {\n      onChange: (e: { target: { value: React.SetStateAction<string> } }) => {\n        setSearchValue(e.target.value);\n      },\n      onSearch: async () => {\n        setSearchStatus(\"searching\");\n        const results = await getOmdbResults(searchValue, \"search\");\n        if (results.Search) {\n          setSearchResults(results.Search);\n          setSearchStatus(\"success\");\n        } else {\n          setSearchResults([]);\n          setSearchStatus(\"noresults\");\n        }\n      },\n      onCancel: () => {\n        setSearchValue(\"\");\n      },\n    },\n\n    nominations: {\n      onAction: (type: \"Results\" | \"Nominations\", index: number) => {\n        if (type === \"Results\") {\n          // @ts-ignore\n          const rest = searchResults.find((elem: any) => index === elem.Title);\n          // @ts-ignore\n          setNominations([rest, ...nominations]);\n        } else {\n          setNominations(\n            [...nominations].filter((elem: any) => index !== elem.Title)\n          );\n        }\n      },\n    },\n  };\n\n  // Uses the content in local storage to render initial nominations\n  useInitialLocalStorage(setNominations);\n\n  // Updates the content of local storage on nominations change\n  useUpdateLocalStorage(nominations, setNominations);\n\n  const isBannerActive = nominations.length === 5;\n  return (\n    <>\n      <div className={`nominations_banner ${isBannerActive ? \"show\" : \"hide\"}`}>\n        You have successfully selected all of your nominations, thank you for\n        using Shoppies 🙂\n      </div>\n\n      <div\n        className={`main_container ${searchStatus} ${\n          isBannerActive ? \"showBanner\" : \"\"\n        }`}\n      >\n        <div className=\"logo_container\">The Shoppies</div>\n        <div className=\"search_container\">\n          <Input\n            value={searchValue}\n            placeholder=\"Search for a movie...\"\n            onChange={handlers.input.onChange}\n            onSearch={handlers.input.onSearch}\n            onCancel={handlers.input.onCancel}\n          />\n        </div>\n        <div className=\"content_container\">\n          <ResultContainer\n            type=\"Results\"\n            searchResults={searchResults.filter(\n              (elem) => !nominations.includes(elem)\n            )}\n            searchStatus={searchStatus}\n            onAction={handlers.nominations.onAction}\n            showActionButton={nominations.length !== 5}\n          />\n          <ResultContainer\n            type=\"Nominations\"\n            searchResults={nominations}\n            searchStatus={\"idle\"}\n            onAction={handlers.nominations.onAction}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\n// [EXPORTS]\nexport default Main;\n","// [IMPORTS]\n/* node_modules */\nimport { useEffect } from \"react\";\n\n// [CUSTOM HOOK]\nexport const useInitialLocalStorage = (setNominations: (obj: any) => void) => {\n  return useEffect(() => {\n    const loc = localStorage.getItem(\"shopify_challenge_nominations\");\n    if (loc !== null) {\n      setNominations(JSON.parse(loc));\n    }\n  }, []);\n};\n","// [IMPORTS]\n/* node_modules */\nimport { useEffect } from \"react\";\n\n// [CUSTOM HOOK]\nexport const useUpdateLocalStorage = (\n  nominations: any,\n  setNominations: (obj: any) => void\n) => {\n  return useEffect(() => {\n    localStorage.setItem(\n      \"shopify_challenge_nominations\",\n      JSON.stringify(nominations)\n    );\n  }, [nominations, setNominations]);\n};\n","import React from \"react\";\nimport Main from \"./Main/Main\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}