{"version":3,"sources":["Components/Input/Input.tsx","Utils/getOmdbResults.ts","Main/Main.tsx","Hooks/useInitialLocalStorage.tsx","Hooks/useUpdateLocalStorage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","props","value","placeholder","onChange","onSearch","onCancel","inputRef","React","useRef","iconAvailability","className","ref","onKeyDown","e","key","preventDefault","type","onClick","console","log","current","focus","icon","faTimes","color","size","faSearch","getOmdbResults","searchTerm","a","params","queryString","stringify","s","i","fetch","process","req","json","toString","InfoField","title","children","href","MovieTileContainer","isExpanded","searchResult","expandedRef","index","toggleExpanded","onAction","actionButtonVisible","isTitle","handlers","classList","add","window","setTimeout","Title","Poster","faFilm","src","map","elem","Year","faPlus","faMinus","imdbID","faInfoCircle","uuid","ResultContainer","results","searchStatus","useState","expanded","setExpanded","imdbId","res","Main","setSearchStatus","searchValue","setSearchValue","searchResults","setSearchResults","nominations","setNominations","input","target","Search","rest","find","filter","useEffect","loc","localStorage","getItem","JSON","parse","useInitialLocalStorage","setItem","useUpdateLocalStorage","isBannerActive","length","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eedd4411.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./Input.scss\";\n\nconst Input = (props: any) => {\n  const { value, placeholder, onChange, onSearch, onCancel } = props;\n  const inputRef = React.useRef(null);\n  const iconAvailability = value === \"\" ? \"unavailable\" : \"available\";\n  return (\n    <div className=\"component_il20afar_input\">\n      <div className=\"input_container\">\n        <input\n          ref={inputRef}\n          className=\"input_div\"\n          value={value}\n          placeholder={placeholder}\n          onChange={onChange}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n              onSearch();\n            }\n          }}\n          type=\"text\"\n        />\n        <div\n          className={`cancel_icon_container ${iconAvailability}`}\n          onClick={() => {\n            console.log(\"passs\");\n            onCancel();\n            //@ts-ignore\n            inputRef.current.focus();\n          }}\n        >\n          <FontAwesomeIcon icon={faTimes} color=\"red\" size=\"sm\" />\n        </div>\n      </div>\n\n      <div\n        className={`search_icon_container ${iconAvailability}`}\n        onClick={onSearch}\n      >\n        <FontAwesomeIcon icon={faSearch} color=\"white\" size=\"sm\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n","import queryString from \"query-string\";\n\nexport const getOmdbResults = async (\n  searchTerm: string,\n  type: \"search\" | \"id\"\n) => {\n  const params = queryString.stringify({\n    ...(type === \"search\" && { s: searchTerm }),\n    ...(type === \"id\" && { i: searchTerm }),\n    type: \"movie\",\n  });\n  try {\n    const req = await fetch(\n      `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_API_KEY}&${params}`\n    );\n    return await req.json();\n  } catch (error) {\n    return error.toString();\n  }\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { faFilm } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Input from \"../Components/Input/Input\";\nimport { useInitialLocalStorage } from \"../Hooks/useInitialLocalStorage\";\nimport { useUpdateLocalStorage } from \"../Hooks/useUpdateLocalStorage\";\nimport { getOmdbResults } from \"../Utils/getOmdbResults\";\n\nimport \"./Main.scss\";\n\ntype TSearchStatus = \"idle\" | \"searching\" | \"success\" | \"error\";\n\nconst InfoField = (props: any) => {\n  const { title, children } = props;\n  return (\n    <div className=\"info_field_container\">\n      <div className=\"info_field_title\">{title}:</div>\n      <a className=\"info_field_content\" href={children}>\n        {children}\n      </a>\n    </div>\n  );\n};\n\nconst MovieTileContainer = (props: {\n  isExpanded: boolean;\n  searchResult: any;\n  expandedRef: any;\n  title: string;\n  index: number;\n  toggleExpanded: any;\n  onAction: any;\n  actionButtonVisible: boolean;\n}) => {\n  const {\n    isExpanded,\n    searchResult,\n    expandedRef,\n    title,\n    index,\n    toggleExpanded,\n    onAction,\n    actionButtonVisible,\n  } = props;\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isTitle = title === \"Results\";\n\n  const handlers = {\n    onAction: () => {\n      if (actionButtonVisible) {\n        ref.current && ref.current.classList.add(\"close_animate\");\n\n        window.setTimeout(() => {\n          onAction(title, searchResult.Title);\n        }, 300);\n      }\n    },\n  };\n\n  return (\n    <div\n      key={uuid()}\n      ref={ref}\n      className={`movie_info_container ${isTitle ? \"results\" : \"nominations\"} ${\n        isExpanded ? \"expanded\" : \"\"\n      } ${!actionButtonVisible ? \"hide_action_button\" : \"\"}`}\n    >\n      <div className=\"action_hover_wrapper\" onClick={handlers.onAction}>\n        <div className=\"poster_container\">\n          {searchResult.Poster === \"N/A\" ? (\n            <FontAwesomeIcon icon={faFilm} size=\"lg\" color=\"white\" />\n          ) : (\n            <img src={searchResult.Poster} />\n          )}\n        </div>\n        <div className=\"info_container\">\n          {isExpanded ? (\n            <>\n              {[\n                \"Title\",\n                \"Director\",\n                \"Actors\",\n                \"Year\",\n                \"Runtime\",\n                \"Rated\",\n                \"Released\",\n                \"Plot\",\n              ].map((elem) => (\n                <InfoField title={elem}>{expandedRef.current[elem]}</InfoField>\n              ))}\n            </>\n          ) : (\n            <div className=\"info_wrapper\">\n              {`${searchResult.Title} (${searchResult.Year})`}\n            </div>\n          )}\n        </div>\n        <div className={`icon_container ${isTitle ? \"add\" : \"remove\"}`}>\n          <FontAwesomeIcon icon={isTitle ? faPlus : faMinus} color={\"black\"} />\n        </div>\n      </div>\n\n      <div\n        className=\"icon_container info\"\n        onClick={() => toggleExpanded(index, searchResult.imdbID)}\n      >\n        <FontAwesomeIcon icon={faInfoCircle} color={\"black\"} />\n      </div>\n    </div>\n  );\n};\n\nconst ResultContainer = (props: {\n  title: string;\n  results: any[];\n  searchStatus: TSearchStatus;\n  onAction: any;\n  actionButtonVisible?: boolean;\n}) => {\n  const {\n    title,\n    results,\n    searchStatus,\n    onAction,\n    actionButtonVisible = true,\n  } = props;\n  const [expanded, setExpanded] = useState(-1);\n  const expandedRef: any = useRef({});\n\n  const toggleExpanded = async (index: number, imdbId: string) => {\n    if (index === expanded) {\n      setExpanded(-1);\n    } else {\n      const res = await getOmdbResults(imdbId, \"id\");\n      expandedRef.current = res;\n      setExpanded(index);\n    }\n  };\n\n  return (\n    <div\n      className={`result_container ${searchStatus} ${\n        !actionButtonVisible ? \"hideActionButton\" : \"\"\n      }`}\n    >\n      <div className=\"title_container\">{title}</div>\n      <div className=\"content_wrapper\">\n        {results.map((searchResult, index) => (\n          <MovieTileContainer\n            isExpanded={index === expanded}\n            {...{\n              searchResult,\n              expandedRef,\n              title,\n              index,\n              toggleExpanded,\n              onAction,\n              actionButtonVisible,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Main = () => {\n  const [searchStatus, setSearchStatus]: [TSearchStatus, any] = useState(\n    \"idle\"\n  );\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [nominations, setNominations] = useState([]);\n\n  const handlers = {\n    input: {\n      onChange: (e: any) => {\n        setSearchValue(e.target.value);\n      },\n      onSearch: async () => {\n        setSearchStatus(\"searching\");\n        const results = await getOmdbResults(searchValue, \"search\");\n        if (results.Search) {\n          setSearchResults(results.Search);\n          setSearchStatus(\"success\");\n        } else {\n          setSearchStatus(\"idle\");\n        }\n      },\n      onCancel: () => {\n        setSearchValue(\"\");\n      },\n    },\n\n    nominations: {\n      onAction: (type: \"Results\" | \"Nominations\", index: number) => {\n        if (type === \"Results\") {\n          // @ts-ignore\n          const rest = searchResults.find((elem: any) => index === elem.Title);\n          // @ts-ignore\n          setNominations([rest, ...nominations]);\n        } else {\n          setNominations(\n            [...nominations].filter((elem: any) => index !== elem.Title)\n          );\n        }\n      },\n    },\n  };\n\n  // Uses the content in local storage to render initial nominations\n  useInitialLocalStorage(setNominations);\n\n  // Updates the content of local storage on nominations change\n  useUpdateLocalStorage(nominations, setNominations);\n\n  const isBannerActive = nominations.length === 5;\n  return (\n    <>\n      <div className={`nominations_banner ${isBannerActive ? \"show\" : \"hide\"}`}>\n        You have successfully selected all of your nominations, thank you for\n        using Shoppies 🙂\n      </div>\n\n      <div\n        className={`main_container ${searchStatus} ${\n          isBannerActive ? \"showBanner\" : \"\"\n        }`}\n      >\n        <div className=\"logo_container\">The Shoppies</div>\n        <div className=\"search_container\">\n          <Input\n            value={searchValue}\n            placeholder=\"Search for a movie...\"\n            onChange={handlers.input.onChange}\n            onSearch={handlers.input.onSearch}\n            onCancel={handlers.input.onCancel}\n          />\n        </div>\n        <div className=\"content_container\">\n          <ResultContainer\n            title=\"Results\"\n            results={searchResults.filter(\n              (elem) => !nominations.includes(elem)\n            )}\n            searchStatus={searchStatus}\n            onAction={handlers.nominations.onAction}\n            actionButtonVisible={nominations.length !== 5}\n          />\n          <ResultContainer\n            title=\"Nominations\"\n            results={nominations}\n            searchStatus={searchStatus}\n            onAction={handlers.nominations.onAction}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Main;\n","import { useEffect } from \"react\";\n\nexport const useInitialLocalStorage = (setNominations: (obj: any) => void) => {\n  return useEffect(() => {\n    const loc = localStorage.getItem(\"shopify_challenge_nominations\");\n    if (loc !== null) {\n      setNominations(JSON.parse(loc));\n    }\n  }, []);\n};\n","import { useEffect } from \"react\";\n\nexport const useUpdateLocalStorage = (\n  nominations: any,\n  setNominations: (obj: any) => void\n) => {\n  return useEffect(() => {\n    localStorage.setItem(\n      \"shopify_challenge_nominations\",\n      JSON.stringify(nominations)\n    );\n  }, [nominations, setNominations]);\n};\n","import React from \"react\";\nimport Main from \"./Main/Main\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}